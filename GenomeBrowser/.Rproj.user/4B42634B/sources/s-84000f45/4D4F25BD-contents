#
# This is a Shiny web application. You can run the application by clicking
# the 'Run App' button above.
#
# Find out more about building applications with Shiny here:
#
#    http://shiny.rstudio.com/
#

library(shiny)
library(shinycssloaders)
library(tidyverse)
library(stringr)
library(Gviz)
library(ggpubr)
library(regioneR)

source("~/R/Proof_Concept/visualise_ER_example_gviz_sonia.R")

# Define UI for application that draws a histogram
ui <- fluidPage(
   
   # Application title
   titlePanel("Genomic Browser"),
   
   # Sidebar with a slider input for number of bins 
   
   sidebarLayout(
      sidebarPanel(
        textInput(inputId = "geneid", label = "GeneID", value = "ENSG00000145335", width = NULL, placeholder = "Type gene ID"),
        selectInput("tissue", "Tissue:", choices = c("Brain Cerebellar Hemisphere" = "brain_cerebellar_hemisphere",
                                                     "Lung" = "lung",
                                                     "Frontal Cortex" = "frontalcortexba9"),  multiple = T, selected = "brain_cerebellar_hemisphere"),
        numericInput(inputId = "propor_samples_split_read", label = "Propor samples split read:", value = 0.05, step = 0.05, min = 0.05, max = 1),
        sliderInput(inputId = "extend_region_to_plot", label = "Extend region to plot:",
                    min = 1000, max = 3000, value = 1000, step = 500),
        checkboxInput("get_constraint", "Get constraint", FALSE),
        checkboxInput("get_conserv", "Get conservation", FALSE),
        checkboxInput("all_split_reads", "All split read", FALSE),
        actionButton("update", "Change")
      ),
      
      # Show a plot of the generated distribution
      mainPanel(
        plotOutput("plot1", hover = "plot_click"),
        verbatimTextOutput("info")
      )
   )
)

# Define server logic required to draw a histogram
server <- function(input, output) {

  gene_plot <- eventReactive(input$update, {
    withProgress(message = 'Making plot', value = 0.1, min = 0, max = 1, expr =  {
      
      
      visualise_ER_example(ERs_w_annotation_df = ERs_w_annotation_all_tissues_width_ab_3_no_cells_sex_specific, 
                           txdb = ensembl_grch38_v92_genes_txdb, 
                           ensembl_gene_id = input$geneid,
                           tissues_to_plot = input$tissue, 
                           genome_build = input$genomebuild,
                           gtex_split_read_table_mean_cov_df,
                           tissue_optimal_cut_off_max_gap_df,
                           get_constraint = input$get_constraint,
                           get_conserv = input$get_conserv,
                           propor_samples_split_read = input$propor_samples_split_read,
                           extend_region_to_plot = input$extend_region_to_plot,
                           collapseTranscripts = "meta",
                           transcriptAnnotation = "gene",
                           aceview_annot = NULL,
                           add_custom_annot_track = NULL,
                           all_split_reads = input$all_split_reads)
      dev.print(file = "~/R/Proof_Concept/SNCA_OMIM_reannot_example.png", device = png, res = 600, width = 10, height = 11.69/2, units = "in")

    })
  })
  
  output$info <- renderText({
    paste0("x=", input$plot_click$x, "\ny=", input$plot_click$y)
    y <- readPNG("SNCA_OMIM_reannot_example.png")
    val <- rgb( y[input$plot_click$x,input$plot_click$y,1], y[input$plot_click$x,input$plot_click$y,2], y[input$plot_click$x,input$plot_click$y,3] )
    
    paste0("val",val)
    
  })
  output$plot1 <- renderPlot({
    gene_plot()
  })
}
# Run the application 
shinyApp(ui = ui, server = server)
